#include <stdlib.h>
#include <stdio.h>
#include <string.h>
/*
#include <ctype.h>
#include <sys/ipc.h>
#include <sys/shm.h>
*/
#include "thread_pro.h"
#include "logf.h"

#define ERR        (-1)
#define OK        (0)
#define ST_TYPE_FTP_APP_CONFIG    	(1)
#define ST_TYPE_FTP_APP_NODE_CFG    (2)
#define MAX_NODE_CONFIG             (500)
#define MAX_SHMSIZE_APPCFG 			(102400)

#define CHAR_ARR_LEN_MAX 1024
#define BREAK_IF_ERR(ret) \
	if (0 != ret) {printf("Get errorcode = [%d] line = [%d].\n", ret, __LINE__); break;}
#define RETURN_IF_ERR(ret) \
	if (0 != ret) {printf("Get errorcode = [%d] line = [%d].\n", ret, __LINE__); return ret;}

int g_iNum = 0;
pthread_mutex_t g_tMutex ;      

void* Th_Prt()
{
    int             i = 0;
    int*            piRet = malloc(sizeof(int)) ;
    int             iRet = 0;
    *piRet = 2;

    while (i < 10)
    {
        i++;
        iRet = pthread_mutex_trylock(&g_tMutex);
        if (iRet)
        {
            printf("son[%x] get mutex failed. do not block . do next .\n", pthread_self());
            continue;
        }
        sleep(1);
        g_iNum++;
        iRet = pthread_mutex_unlock(&g_tMutex);
        BREAK_IF_ERR(iRet); 
    }

    printf("hello son. tid  = [%x] num = [%d]\n", pthread_self(), g_iNum);
    pthread_exit((void*)piRet);
    return (void*)0;

}

void* Th1_Prt()
{
    int             i = 0;
    int             iRet = 0;
    while (i < 10)
    {
        i++;
        printf("son1[%x] block get mutex . \n", pthread_self());
        iRet = pthread_mutex_lock(&g_tMutex);
        if (iRet)
        {
            printf("son[%x] block get mutex failed. check .\n", pthread_self());
            continue;
        }
        g_iNum++;
        sleep(1);

        iRet = pthread_mutex_unlock(&g_tMutex);
        BREAK_IF_ERR(iRet); 
    }

    printf("hello son1. tid  = [%x] num = [%d]\n", pthread_self(), g_iNum);

    return (void*)0;
}

void* Th2_Prt()
{
    int             i = 0;
    int             iRet = 0;
    while (i < 10)
    {
        i++;
        printf("son2[%x] block get mutex . \n", pthread_self());
        iRet = pthread_mutex_lock(&g_tMutex);
        if (iRet)
        {
            printf("son[%x] block get mutex failed. check .\n", pthread_self());
            continue;
        }
        g_iNum++;
        sleep(1);

        iRet = pthread_mutex_unlock(&g_tMutex);
        BREAK_IF_ERR(iRet); 
    }

    printf("hello son2. tid  = [%x] num = [%d]\n", pthread_self(), g_iNum);

    return (void*)0;
}

/*
 *@des:
 *@caution: 
 */
int main(int argc, char** argv)
{
    int             iRet            = 0;
    int             *pvRet          = NULL;
    LOGD("in main .");
    pthread_t       tTid            = 0;
    pthread_t       tTid1           = 0;
    pthread_t       tTid2           = 0;
    /* pthread_mutex */

    iRet    = pthread_mutex_init(&g_tMutex, NULL);
    RETURN_IF_ERR(iRet);

    iRet = pth_crt(&tTid, NULL, Th_Prt, NULL);
    RETURN_IF_ERR(iRet);

    iRet = pth_crt(&tTid1, NULL, Th1_Prt, NULL);
    RETURN_IF_ERR(iRet);

    iRet = pth_crt(&tTid2, NULL, Th1_Prt, NULL);
    RETURN_IF_ERR(iRet);

    /* detach tid */
    iRet = pthread_detach(tTid);
    RETURN_IF_ERR(iRet);
    iRet = pthread_detach(tTid1);
    RETURN_IF_ERR(iRet);
    iRet = pthread_detach(tTid2);
    RETURN_IF_ERR(iRet);

    //pthread_join(tTid, &pvRet);
    free((long)pvRet);
    sleep (100);
    printf(" at end  num = [%d]\n", g_iNum);
    
    iRet    = pthread_mutex_destroy(&g_tMutex);
    RETURN_IF_ERR(iRet);

	return 0;
}
